TYPE : int
ID : i
ASSIGN : =
LEFT_BRAC : (
NUM : 4
PLUS : +
NUM : 5
MUL : *
NUM : 3
RIGHT_BRAC : )
SEMI : ;
TYPE : int
ID : j
ASSIGN : =
ID : x
SEMI : ;
TYPE : int
ID : func
LEFT_BRAC : (
TYPE : int
ID : pu
COMMA : ,
TYPE : char*
ID : x
RIGHT_BRAC : )
LEFT_CURLY : {
IF : if
LEFT_BRAC : (
ID : x
GREATER_THAN : >
NUM : 0
RIGHT_BRAC : )
LEFT_CURLY : {
ID : i
ASSIGN : =
NUM : 1
SEMI : ;
ID : a
ASSIGN : =
ID : cc
SEMI : ;
RIGHT_CURLY : }
WHILE : while
LEFT_BRAC : (
ID : i
LESS_THAN : <
NUM : 10
RIGHT_BRAC : )
LEFT_CURLY : {
ID : hemlo
ASSIGN : =
ID : bhoi
SEMI : ;
RIGHT_CURLY : }
ID : sevlon
ASSIGN : =
ID : bhoi
SEMI : ;
RIGHT_CURLY : }
TYPE : int
ID : dun
LEFT_BRAC : (
RIGHT_BRAC : )
LEFT_CURLY : {
ID : function
ASSIGN : =
NUM : 0
SEMI : ;
TYPE : int
ID : dont
ASSIGN : =
NUM : 1
SEMI : ;
RETURN : return
NUM : 1
SEMI : ;
RIGHT_CURLY : }
